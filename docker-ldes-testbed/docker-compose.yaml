services:
  graphdb:
    # see also:
    # - docker-hub: https://hub.docker.com/r/ontotext/graphdb
    #
    # effectively will create:
    # - api endpoint: http://localhost:${GDB_PORT:-7200}/rest
    # - UI          : http://localhost:${GDB_PORT:-7200}/
    image: ontotext/graphdb:10.6.4
    container_name: graphdb
    restart: unless-stopped
    environment:
      JAVA_OPTS: "-Xmx4g -Xms4g"
    ports:
      - "${GDB_PORT:-7200}:7200"

  ldio-workbench:
    # see also:
    # - docker-hub: https://hub.docker.com/r/ldes/ldi-orchestrator
    # - docs:       https://informatievlaanderen.github.io/VSDS-Linked-Data-Interactions/
    # - github:     https://github.com/Informatievlaanderen/VSDS-Linked-Data-Interactions
    #
    # effectively will create:
    # - api endpoint: http://localhost:${LDIO_PORT:-8080}/admin/api/v1
    #   with resources
    #                 http://localhost:${LDIO_PORT:-8080}/admin/api/v1/pipeline             --> all running pipelines
    #                 http://localhost:${LDIO_PORT:-8080}/admin/api/v1/pipeline/ldes-client --> all running ldes-clients
    # - swagger ui:   http://localhost:${LDIO_PORT:-8080}/v1/swagger                        --> see ./ldio-config.yml
    image: ldes/ldi-orchestrator:2.12.0
    container_name: ldio-workbench
    healthcheck:
      test:
        ["CMD", "wget", "-qO-", "http://ldio-workbench:8080/actuator/health"]
      interval: 12s
      timeout: 3s
      retries: 12
    volumes:
      - ./ldio-config.yml:/ldio/application.yml:ro
    ports:
      - "${LDIO_PORT:-8080}:8080"

  prometheus:
    # see also:
    # - docker-hub: https://hub.docker.com/r/prom/prometheus
    # - website:   https://prometheus.io/
    #
    # effectively will create enternal service at http://prometheus:9090
    # - basic UI: http://localhost:${PROM_PORT:-9090}/query
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    expose:
      - 9090
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "0.75GB"
        reservations:
          cpus: "0.50"
          memory: "0.5GB"
    ports:
      - "${PROM_PORT:-9090}:9090"

  grafana:
    # see also:
    # - docker-hub: https://hub.docker.com/r/grafana/grafana-oss
    # - website:   https://grafana.com/
    #
    # effectively will create:
    # - dashboard ui:   http://localhost:${GRAF_PORT:-3000}/dashboards
    image: grafana/grafana-oss:main
    container_name: grafana
    volumes:
      - ./grafana-provisioning:/etc/grafana/provisioning
      - ./grafana.ini:/etc/grafana/grafana.ini:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://grafana:3000/api/health"]
      interval: 12s
      timeout: 3s
      retries: 20
    deploy:
      resources:
        limits:
          cpus: "0.75"
          memory: "0.75GB"
        reservations:
          cpus: "0.50"
          memory: "0.5GB"
    ports:
      - "${GRAF_PORT:-3000}:3000"

  # ldes-test-coordinator:
  #   build:
  #     context: ./ldes-test-coordinator
  #   image: ${REG:-ldes-testbed-docker}/ldes-test-coordinator:${TAG}
  #   depends_on:
  #     graphdb:
  #       condition: service_started
  #     ldio-workbench:
  #       condition: service_healthy
  #   volumes:
  #     - ${IO_PATH:-../io}:/io  # here will be ./jobs, ./results and...
  #   environment:
  #     - LDIO=http://ldio-workbench:8080
  #     - GRAPHDB=http://graphdb:7200
  #   ports:
  #     - "${UI_PORT:-4444}:4444"
